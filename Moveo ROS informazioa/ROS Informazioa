1- Lehendabizi, ziurtatu Ros-ak behar bezala instalatuta daukazula funtzionamenduan dagoen lan-espazio batekin: Ros Kinetic erabili Ubuntu 16.04n (beste banaketa bat baduzu, 
baliteke gauza batzuk aldatu behar izatea). Gaur egun 'moveo_ros' daukat 'src' karpetan.
2- Simulazioan mobilizatzeko ibilbideak planifikatu eta gauzatzeko (RVIZ, Moveit osagarriarekin), exekutatu terminaleko komando hau: "roslaunch moveo_moveit_config demo.launch"
3- Leihoa kargatu ondoren, beheko ezkerreko izkinan "baimendu ik gutxi gorabeherako irtenbideak" markatu. Gero, egin klik "plangintza" fitxan, RVIZeko MotionPlanning panelean. 
Hautatu helburu-egoera berri bat markagailu interaktiboa arrastaka (bola urdin argia azken efektorean) edo "helburu-egoera hautatu" aukeraren azpian. Helburuaren egoera 
eguneratzen denean, "Planifikatu eta exekutatu" ibilbidea planifikatu eta gauzatuko du, hasierako egoeratik eguneratutako helburuaren egoerara arte.

Benetako robota mugitzen, robot simulatuaren ibilbideekin sinkronizatuta.
4- Ziurtatu AccelStepper eta ros_lib liburutegiak deskargatzen dituzula Arduino inguruan. 
Baldin eta ros_lib lehendik badago Arduinoko liburutegietan (/ liburutegietan), 
jarraitu arazoak konpontzeko azken aholkua edo "ArmJointState.h: ez dago halako fitxategirik" dioen errore bat lortuko duzu. Ros-ek ros_lib ezabarazten dizu eta birsortzen 
duzu mezu pertsonalizatu berri bat sartzen duzun bakoitzean.
5- Aldatu zure robotaren eta RAMPS 1.4ren arteko pinen diseinua 'moveo_moveit_arduino.ino' lanean eta kargatu artxiboa zure Arduinon (mega 2560 erabiltzen ari naiz). 
Ziurtatu robota eta simulazioa posizio berean daudela (simulazioa posizio bertikalean konfiguratzeko, hautatu "bertikala", "Hautatu helburu-egoerak" RVIZen.
6-'moveit_convert.cpp 'atalean, stepsPerRevolution matrizea ordezkatzen du bere motor bakoitzaren pausoekin/iraultzarekin (edo mikropazoekin/iraultzarekin). 
(Oraindik balio horiek ezagutzen ez badituzu, esperimentalki lor dezakezu zenbat mikropazo/iraultza dituzten motorrek MultiStepperTest.ino erabiliz eta emaitzak 
erregistratuz/behatuz)
7- Simulazioarekin, exekutatuz gero, exekutatu komando hauetako bakoitza bere terminal bereizian:
Rosrun rosserial_python serial_node.py/dev/ttyUSB0 (Arduinorekin komunikatzen den nodo rosserial bat ezartzen du)
Rosrun moveo_moveit moveit_convert (joint_state simulazio-errotazioak pausu bihurtzen ditu eta Arduino script-a harpidetzen zaion joint_steps gaian argitaratzen ditu)
Rostopic pub gripper_angle std_msgs/UInt16 < angle 0-180> (Gripper_angle argitaratzen du)
Orain, simulazioan planifikatutako eta gauzatutako edozein ibilbide benetako robotean islatzen da.


Direktorioen buruzko informazioa:
Moveo_urdf: BCN3D Moveo-rako URDF (robot bateratua deskribatzeko fitxategia) dauka. Beharrezkoa da RVIZ simulaziorako eta moveit konfiguraziorako.
Moveo_Moveit_Config: Moveiterako konfigurazioa, RVIZen osagarri bat duen mugimendua planifikatzeko esparrua, hain zuzen ere.
Moveo_Moveit: Moveit_convert.cpp:'Joint_state' simulazio-errotazioak ('move_group/fake_controller_joint_states' gaikoa) urrats bihurtzen ditu eta/joint_steps gaiari buruz 
argitaratzen du. Joint_steps 6 Int16 balioko matrize bat da (kasu honetan 5 artikulazio baino ez ditugun arren), moveit_convert nodoa exekutatzen hasi zenetik artikulazio 
bakoitzak exekutatutako urrats metatuak irudikatzen dituena.

Move_group_interface_coor_1.cpp: scriptean azken efektorerako pose/posizio bat kodetu dezake eta han ibilbide bat planifikatu/exekutatu. Azken efektorearen egungo 
posizioa/posizioa ere irakurtzen/igortzen du.

Arazoak konpontzea: 7. urratsaren ondoren, 3 gai berri sortu beharko lirateke:

/joint_steps: motor bakoitza nahi den posiziora mugitzeko beharrezko urratsak.
/joint_steps_feedback: berdin/joint_steps, salbu eta Arduinok argitaratu duela, Arduinok informazioa behar bezala jasotzen duela egiaztatzeko.
/Gripper_angle: pintzaren egungo angelua.
Mando-lerrotik mobilizazioa mugitzeko:

Rostopic pub joint_steps moveo_moveit/ArmJointState < Joint1 Joint2 Joint3 Joint4 Joint5 0>
Aldatu "Joint1, Joint2, etab. "Artikulazio bakoitza mugitzea nahi duen urrats-kopuruari.
Erabili rostopic listy bilatu gai horiek gaur egun gauzatzen ari diren egiaztatzeko

Erabili rostopic echo/< topic>, < gaiari buruzko datuak zure terminalean ikusteko

"Errorea: moveo_moveit/ArmJointState.h: no such file or directory" lortzen baduzu, egin urrats hauek terminalean:

CD < Arduino sketchbook>/libraries
Rm -rf ros_lib
Rosrun rosserial_arduino make_libraries.py.


Softwarearen instalazioa:



Erlazionatutako liburutegiak instalatzeko 2 aukera dituzu.

(Gomendatua) binarioak instalatzea Ros lantokian
Arrosseriala instala dezake Arduinorentzat, honako hauek exekutatuz:


Sudo apt-get install ros-indigo-rosserial-arduino
Sudo apt-get install ros-indigo-rosserial
Instalatzen ari zaren bertsioaren izenarekin ordezkatzen duzu: adibidez, hidro.

Ros lantokiko iturritik instalatzea
Iturburu-kodea konpilatzeko jarraibideak desberdinak dira groovy + (catkin) eta aurreko bertsioetarako (rosbuild). Hautatu konpilazio-sistema bertsioaren arabera, 
dagozkion jarraibideak ikusteko.

Rosserial jaurtiketa zoragarritik katalogatua izan da, eta lan fluxua, jaurtiketa indartsuekin eta aurrekoekin alderatuz pixka bat ezberdina da. 
Erabili nahi duen pakete bakoitzaren gainean liburutegi-sorgailua exekutatu beharrean, behin exekutatu eta instalatutako mezu guztietarako liburutegiak sortzen ditu. 
Jarraian datozen jarraibideetan, < ws> bere catkin lan-espazioa adierazten du.

CD < ws>/src
Clon de git https://github.com/ros-drivers/rosserial.git
CD < ws>
Katkin_make
Katkin_make install

Komando horiek github biltegiko rosseriala klonatzen dute, komunikaziorako beharrezkoak diren rosserial_msg-ak sortzen dituzte eta liburutegiko fitxategiak sortzen dituzte
< ws>/devel/lib direktorioan.

Arduinoa konektatzeko:
ls -l /dev | grep ACM (aarib a la izkierda)
sudo chmod 777 /dev/ttyACM0 (aarib a la izkierda)

Aktibatuta dagoen ikusteko, fure lanerako karpeta: echo $ROS_PACKAGE_PATH

/home/ros/catkin_ws/src:/opt/ros/kinetic/share    (ez bada hau agertzen)

source /home/ros/catkin_ws/devel/setup.bash     (hau idatzi) (aarib a la izkierda)


roslaunch: pakete asko batera irekitzeko da. Kasu honetan gure robota martxan jartzeko erabiliko dugu.

Rosrun: artxibo bat martxan jartzeko. Kasu honetan gure robotaren mugimenduetarako


ROBOTA RVIZ SOFTWAREAN KONTROLATZEKO MOVEIT BITARTEZ (grafikoa)

Lehenengo pausoak:

roslaunch moveo_moveit_config demo.launch (arriba izkierda)
rosrun moveo_moveit moveit_convert (derecha abajo)
rosrun rosserial_python serial_node.py _port:=/dev/ttyACM0 _baud:=57600 (Arriba derecha)

Martxan jarri ondoren:

psizioak irakurtzeko: rostopic echo /joint_states

posizioak idazteko: 
eskuaren angelua idazteko: rostopic pub /gripper eta tabuladorearekin bete hau lortu arte:

		rostopic pub /gripper_angle std_msgs/UInt16 "data: 0"

Robota python bidez mugitzeko: rosrun moveo_moveit moveo_objrec_publisher.py


